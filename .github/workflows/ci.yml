name: CI

on:
  push:
    branches: [ "*" ]  # 全ブランチ対応
  pull_request:
    branches: [ "*" ]  # 全ブランチ対応

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tmux git

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install build twine bandit safety

      - name: Check code formatting
        run: black --check .

      - name: Lint with flake8
        run: flake8 .

      - name: Type check with mypy
        run: mypy .

      - name: Security check with bandit
        run: bandit -r src/haconiwa

      - name: Check dependencies with safety
        run: safety check

      - name: Test haconiwa --help command
        run: |
          echo "Testing haconiwa --help command on Python ${{ matrix.python-version }}"
          haconiwa --help
          echo "✅ haconiwa --help executed successfully on Python ${{ matrix.python-version }}"

      - name: Run tests with coverage
        run: |
          pytest --cov=haconiwa tests/
          coverage xml
          
      - name: Run .haconiwa directory structure tests
        run: |
          pytest tests/unit/test_haconiwa_directory_structure.py -v
      
      - name: Run env file copy tests
        run: |
          # Test env file functionality
          pytest tests/unit/test_env_file_copy.py -v
          pytest tests/integration/test_apply_with_env_files.py -v
      
      - name: Run task assignment fix tests
        run: |
          # Test task assignment json location fix
          pytest tests/integration/test_task_assignment_fix.py -v
      
      - name: Run AICodeConfig tests
        run: |
          # Test AICodeConfig functionality
          pytest tests/unit/test_aicode_config.py -v
      
      - name: Run task submit tests
        run: |
          # Test task submit functionality
          pytest tests/unit/test_task_submit.py -v

      - name: Run scenario tests
        run: |
          # Test core YAML configurations
          echo "Testing haconiwa-world.yaml"
          haconiwa apply -f haconiwa-world.yaml --force-clone --no-attach
          
          echo "Testing minimal configuration"
          haconiwa apply -f test_cases/minimal_config.yaml --force-clone --no-attach
          
          # Test env file functionality
          echo "Testing with env files"
          echo "API_KEY=test123" > .env.test
          echo "LOG_LEVEL=DEBUG" >> .env.test
          haconiwa apply -f test_cases/minimal_config.yaml --env .env.test --dry-run --no-attach

      - name: Build package
        run: python -m build

      - name: Check distribution
        run: twine check dist/*

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  haconiwa-help-test:
    name: "Haconiwa Help Test"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tmux git

      - name: Install haconiwa from PyPI
        run: |
          python -m pip install --upgrade pip
          pip install haconiwa

      - name: Test haconiwa --help from PyPI
        run: |
          echo "🧪 Testing haconiwa --help from PyPI on Python ${{ matrix.python-version }}"
          haconiwa --help
          echo "✅ haconiwa --help from PyPI executed successfully on Python ${{ matrix.python-version }}"

      - name: Install local development version
        run: |
          pip install -e .

      - name: Test haconiwa --help from local
        run: |
          echo "🔧 Testing haconiwa --help from local development version on Python ${{ matrix.python-version }}"
          haconiwa --help
          echo "✅ haconiwa --help from local executed successfully on Python ${{ matrix.python-version }}"

      - name: Test basic commands
        run: |
          echo "🔧 Testing additional basic commands on Python ${{ matrix.python-version }}"
          haconiwa --version || echo "Version command not available"
          echo "✅ Basic command tests completed on Python ${{ matrix.python-version }}"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m build
          twine upload dist/*